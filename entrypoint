#!/bin/bash

set -o errexit
set -o pipefail

# No postgres user, so just use the default.
if [ -z "${POSTGRES_USER}" ]; then
    base_postgres_image_default_user='postgres'
    export POSTGRES_USER="${base_postgres_image_default_user}"
fi

# This call does not seem to be effective. Hence the hardcoded version of this in the env variables.
export DATABASE_URL="postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}"

# Loop until postgres is ready
postgres_ready() {
python3 << END
import sys

import psycopg2

try:
    psycopg2.connect(
        dbname="${POSTGRES_DB}",
        user="${POSTGRES_USER}",
        password="${POSTGRES_PASSWORD}",
        host="${POSTGRES_HOST}",
        port="${POSTGRES_PORT}",
    )
except psycopg2.OperationalError:
    sys.exit(-1)
sys.exit(0)

END
}
until postgres_ready; do
  >&2 echo 'Waiting for PostgreSQL to become available...'
  sleep 1
done
>&2 echo 'PostgreSQL is available'

echo "$MIGRATE"

if [[ $MIGRATE ]]
then
  if [ "$MIGRATE" = "True" ]; then
    python3 manage.py makemigrations --no-input
    python3 manage.py migrate --no-input
    python3 manage.py collectstatic --noinput
  fi
fi

if [[ $INIT_SUPERUSER ]]
then
  if [ "$INIT_SUPERUSER" = "True" ]; then
    python3 manage.py initialise_superuser --user "$DJANGO_ADMIN" --email "$DJANGO_ADMIN_EMAIL" --password "$DJANGO_ADMIN_PASSWORD"
  fi
fi

nginx

# Switching the WSGI host to Waitress, which seems faster, and more robust than Gunicorn for long running jobs when
# sitting behind Nginx.
if [[ $WAITRESS ]]
then  # WAITRESS is more robust than standard runserver, but won't autoreload during development
  if [ "$WAITRESS" = "True" ]; then
    python3 /app/manage.py waitress --port=5000 --threads=16
  else
    python3 /app/manage.py runserver 5000
  fi
else
   python3 /app/manage.py runserver 5000
fi




